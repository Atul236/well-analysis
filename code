I apologize for that oversight. Here are the datasets you can use for your analysis:

1. **Well Production Data**:
   - [Download Well Production Data](blob:https://outlook.office.com/75d8302c-5c1d-4496-a837-2a48dacf9923)

2. **Well Details**:
   - [Download Well Details](blob:https://outlook.office.com/11d1b3dc-be69-4756-b3bb-431d29a294ad)

3. **Field Details**:
   - [Download Field Details](blob:https://outlook.office.com/96fc7625-c4c0-4aa8-a8d8-a266c4a1fd0d)

4. **Well Cost Data**:
   - [Download Well Cost Data](blob:https://outlook.office.com/964c3120-ff98-4326-880c-b72a7ecc9095)

You can use these datasets to perform the following analyses:

### 1. Descriptive Analysis
#### Summary Statistics
```python
import pandas as pd

# Load the data from CSV files
well_production_data = pd.read_csv('well_production_data.csv')
well_details = pd.read_csv('well_details.csv')
field_details = pd.read_csv('field_details.csv')
well_cost_data = pd.read_csv('well_cost_data.csv')

# Summary statistics for well production data
summary_stats = well_production_data.describe()
print(summary_stats)
```
**Explanation**: This code calculates and prints summary statistics (mean, median, standard deviation, etc.) for the well production data.

### 2. Distribution Analysis
#### Histograms of Production Data
```python
import matplotlib.pyplot as plt

# Plot histograms for production data
plt.figure(figsize=(10, 6))
well_production_data[['Oil_Production', 'Gas_Production', 'Water_Production']].hist(bins=20)
plt.suptitle('Distribution of Production Data')
plt.show()
```
**Explanation**: This code generates histograms to visualize the distribution of oil, gas, and water production data.

### 3. Correlation Analysis
#### Correlation Matrix
```python
# Calculate correlation matrix
correlation_matrix = well_production_data[['Oil_Production', 'Gas_Production', 'Water_Production', 'Pressure', 'Temperature']].corr()
print(correlation_matrix)
```
**Explanation**: This code calculates and prints the correlation matrix to show the relationships between different production variables.

### 4. Trend Analysis
#### Monthly Production Trends
```python
# Convert Production_Date to datetime
well_production_data['Production_Date'] = pd.to_datetime(well_production_data['Production_Date'])

# Group by month and sum production
monthly_production = well_production_data.groupby(well_production_data['Production_Date'].dt.to_period('M')).sum()

# Plot monthly production trends
plt.figure(figsize=(10, 6))
monthly_production[['Oil_Production', 'Gas_Production', 'Water_Production']].plot()
plt.title('Monthly Production Trends')
plt.xlabel('Month')
plt.ylabel('Production')
plt.show()
```
**Explanation**: This code converts the production date to a datetime format, groups the data by month, and plots the monthly production trends for oil, gas, and water.

### 5. Field Comparison
#### Total Production by Field
```python
# Group by field and sum production
field_comparison = well_production_data.groupby('Field').sum()
print(field_comparison[['Oil_Production', 'Gas_Production', 'Water_Production']])
```
**Explanation**: This code groups the production data by field and calculates the total production for each field.

### 6. Geospatial Analysis
#### Well Locations and Depths
```python
# Plot well locations and depths
plt.figure(figsize=(10, 6))
plt.scatter(well_details['Longitude'], well_details['Latitude'], c=well_details['Depth'], cmap='viridis', s=100)
plt.colorbar(label='Depth (feet)')
for i, txt in enumerate(well_details['Well_ID']):
    plt.annotate(txt, (well_details['Longitude'][i], well_details['Latitude'][i]))
plt.title('Well Locations and Depths')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.show()
```
**Explanation**: This code plots the well locations based on their latitude and longitude, with the color representing the depth of each well.

### 7. Time Series Analysis
#### Production Over Time
```python
# Set Production_Date as index and resample by month
time_series_analysis = well_production_data.set_index('Production_Date').resample('M').sum()

# Plot time series analysis of production data
time_series_analysis[['Oil_Production', 'Gas_Production', 'Water_Production']].plot(figsize=(10, 6))
plt.title('Time Series Analysis of Production Data')
plt.xlabel('Date')
plt.ylabel('Production')
plt.show()
```
**Explanation**: This code sets the production date as the index, resamples the data by month, and plots the time series analysis of production data.

### 8. Lifecycle Analysis
#### Production Lifecycle of Wells
```python
# Merge well details with production data
well_lifecycle = well_details.merge(well_production_data, on='Well_ID')

# Calculate days since completion
well_lifecycle['Completion_Date'] = pd.to_datetime(well_lifecycle['Completion_Date'])
well_lifecycle['Days_Since_Completion'] = (well_lifecycle['Production_Date'] - well_lifecycle['Completion_Date']).dt.days

# Plot lifecycle analysis of oil production
plt.figure(figsize=(10, 6))
for well in well_lifecycle['Well_ID'].unique():
    well_data = well_lifecycle[well_lifecycle['Well_ID'] == well]
    plt.plot(well_data['Days_Since_Completion'], well_data['Oil_Production'], label=well)

plt.title('Lifecycle Analysis of Oil Production')
plt.xlabel('Days Since Completion')
plt.ylabel('Oil Production')
plt.legend()
plt.show()
```
**Explanation**: This code merges well details with production data, calculates the days since completion for each well, and plots the lifecycle analysis of oil production.

### 9. Cost vs. Production Analysis
#### Drilling Cost vs. Oil Production
```python
# Merge production and cost data
merged_data = pd.merge(well_production_data, well_cost_data, on='Well_ID')

# Calculate total oil production for each well
total_production = merged_data.groupby('Well_ID')['Oil_Production'].sum().reset_index()

# Merge total production with cost data
cost_vs_production = pd.merge(total_production, well_cost_data, on='Well_ID')

# Plot Drilling Cost vs. Total Oil Production
plt.figure(figsize=(10, 6))
plt.scatter(cost_vs_production['Drilling_Cost'], cost_vs_production['Oil_Production'])
plt.xlabel('Drilling Cost (USD)')
plt.ylabel('Total Oil Production (barrels)')
plt.title('Drilling Cost vs. Total Oil Production')
plt.show()
```
**Explanation**: This code merges the production and cost data, calculates the total oil production for each well, and plots the relationship between drilling cost and total oil production.

Feel free to use this code to perform the analysis on your dataset. If you need any further assistance or additional analysis, just let me know!
